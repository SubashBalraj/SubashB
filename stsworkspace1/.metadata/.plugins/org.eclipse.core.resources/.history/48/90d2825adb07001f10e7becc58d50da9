package com.abc.driverservice.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.abc.driverservice.entity.Driver;
import com.abc.driverservice.exception.DriverNotFoundException;
import com.abc.driverservice.exception.InvalidId;
import com.abc.driverservice.repository.AddressRepository;
import com.abc.driverservice.repository.DriverRepository;

@Service
public class DriverServiceImpl implements DriverService {

	@Autowired
	private DriverRepository driverRepository;

	@Autowired
	private AddressRepository addressRepository;

	@Override
	public Driver insertDriver(Driver driver) {
		return driverRepository.save(driver);
	}

	@Override
	public Driver viewDriverById(int driverId) throws InvalidId {
		Optional<Driver> optionalDriver = driverRepository.findById(driverId);
		if (optionalDriver.isEmpty()) {
			throw new DriverNotFoundException("No Driver found for id: " + driverId);

		}
		Driver driver = optionalDriver.get();
		return driver;
	}

	@Override
	public Driver updateDriver(Driver driver) throws DriverNotFoundException {
		Optional<Driver> optionalDriver = driverRepository.findById(driver.getUserId());
		if (optionalDriver.isEmpty()) {
			throw new DriverNotFoundException("No Driver found ");
		}
		driverRepository.save(driver);
		return driver;
	}

	@Override
	public String deleteDriverById(int id) throws DriverNotFoundException {
		Driver driver = driverRepository.findById(id).orElseThrow(() -> new DriverNotFoundException("No Driver found"));

		addressRepository.delete(driver.getAddress());
		driverRepository.delete(driver);

		return "Driver Id " + id + " deleted ";
	}

	@Override
	public List<Driver> viewBestDriver() throws DriverNotFoundException {
		List<Driver> drivers = driverRepository.viewBestDriver();
		if (drivers.size() > 0)
			return drivers;
		else
			throw new DriverNotFoundException("No Driver found with rating>=4.5");
	}

	@Override
	public List<Driver> getAllDrivers() {
		List<Driver> drivers = driverRepository.findAll();
		return drivers;
	}

}
