package com.abc.tripbookingservice.service;

import com.abc.tripbookingservice.entity.TripBooking;
import com.abc.tripbookingservice.exception.ResourceNotFoundException;
import com.abc.tripbookingservice.exception.TripBookingNotFoundException;
import com.abc.tripbookingservice.repository.TripBookingRepository;
import com.abc.tripbookingservice.service.TripBookingServiceImpl;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class TripBookingServiceTest {

    @Mock
    private TripBookingRepository tripBookingRepository;

    @InjectMocks
    private TripBookingServiceImpl tripBookingService;

    @Test
    public void testGetAllBookings() {
        TripBooking booking1 = new TripBooking();
        TripBooking booking2 = new TripBooking();
        List<TripBooking> bookings = Arrays.asList(booking1, booking2);

        when(tripBookingRepository.findAll()).thenReturn(bookings);

        List<TripBooking> result = tripBookingService.getAllBookings();

        assertEquals(2, result.size());
    }

    @Test
    public void testGetBookingById() {
        TripBooking booking = new TripBooking();
        booking.setBookingID(1);

        when(tripBookingRepository.findById(1)).thenReturn(Optional.of(booking));

        TripBooking result = tripBookingService.getBookingById(1);

        assertNotNull(result);
        assertEquals(1, result.getBookingID());
    }

    @Test
    public void testGetBookingById_BookingNotFound() {
        when(tripBookingRepository.findById(1)).thenReturn(Optional.empty());

        assertThrows(ResourceNotFoundException.class, () -> tripBookingService.getBookingById(1));
    }

    @Test
    public void testCreateBooking() {
        TripBooking booking = new TripBooking();
        booking.setDriver("John Doe");

        when(tripBookingRepository.save(booking)).thenReturn(booking);

        TripBooking result = tripBookingService.createBooking(booking);

        assertNotNull(result);
        assertEquals("John Doe", result.getDriver());
    }

    @Test
    public void testUpdateBooking() {
        TripBooking existingBooking = new TripBooking();
        existingBooking.setBookingID(1);
        existingBooking.setDriver("Existing Driver");

        TripBooking updatedBooking = new TripBooking();
        updatedBooking.setBookingID(1);
        updatedBooking.setDriver("Updated Driver");

        when(tripBookingRepository.existsById(1)).thenReturn(true);
        when(tripBookingRepository.save(updatedBooking)).thenReturn(updatedBooking);

        TripBooking result = tripBookingService.updateBooking(1, updatedBooking);

        assertNotNull(result);
        assertEquals("Updated Driver", result.getDriver());
    }

    @Test
    public void testUpdateBooking_BookingNotFound() {
        TripBooking updatedBooking = new TripBooking();
        updatedBooking.setBookingID(1);
        updatedBooking.setDriver("Updated Driver");

        when(tripBookingRepository.existsById(1)).thenReturn(false);

        assertThrows(ResourceNotFoundException.class, () -> tripBookingService.updateBooking(1, updatedBooking));
    }

    @Test
    public void testDeleteBooking() {
        TripBooking booking = new TripBooking();
        booking.setBookingID(1);
        booking.setDriver("John Doe");

        when(tripBookingRepository.existsById(1)).thenReturn(true);

        tripBookingService.deleteBooking(1);

        verify(tripBookingRepository, times(1)).deleteById(1);
    }

    @Test
    public void testDeleteBooking_BookingNotFound() {
        when(tripBookingRepository.existsById(1)).thenReturn(false);

        assertThrows(ResourceNotFoundException.class, () -> tripBookingService.deleteBooking(1));
    }

}
