package com.abc.cabservice.test;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.abc.cabservice.entity.Cab;
import com.abc.cabservice.exception.ResourceNotFoundException;
import com.abc.cabservice.model.CabResponse;
import com.abc.cabservice.model.Driver;
import com.abc.cabservice.repository.CabRepository;
import com.abc.cabservice.service.CabServiceImpl;
import com.abc.cabservice.service.DriverServiceConsumer;

@ExtendWith(MockitoExtension.class)
public class CabServiceTest {

    @Mock
    private CabRepository cabRepository;

    @Mock
    private DriverServiceConsumer driverService;

    @InjectMocks
    private CabServiceImpl cabService;

    @Test
    public void testAddCab() {
        Cab cab = new Cab();
        when(cabRepository.save(cab)).thenReturn(cab);

        Cab result = cabService.addCab(cab);

        assertNotNull(result);
        assertEquals(cab, result);
    }

    @Test
    public void testUpdateCab() {
        Cab cab = new Cab();
        cab.setCabId(1);

        when(cabRepository.findById(cab.getCabId())).thenReturn(Optional.of(cab));
        when(cabRepository.save(cab)).thenReturn(cab);

        Cab result = cabService.updateCab(cab);

        assertNotNull(result);
        assertEquals(cab.getCabId(), result.getCabId());
    }

    @Test
    public void testUpdateCab_NotFound() {
        Cab cab = new Cab();
        cab.setCabId(1);

        when(cabRepository.findById(cab.getCabId())).thenReturn(Optional.empty());

        assertThrows(ResourceNotFoundException.class, () -> cabService.updateCab(cab));
    }

    @Test
    public void testViewCabsOfType() {
        String carType = "SUV";
        List<String> cabs = new ArrayList<>();
        cabs.add("Cab1");
        cabs.add("Cab2");

        when(cabRepository.viewCarType(carType)).thenReturn(cabs);

        List<String> result = cabService.viewCabsOfType(carType);

        assertNotNull(result);
        assertEquals(2, result.size());
    }

    @Test
    public void testCountCabsOfType() {
        List<Cab> totalCabs = new ArrayList<>();
        totalCabs.add(new Cab());
        totalCabs.add(new Cab());

        when(cabRepository.findAll()).thenReturn(totalCabs);

        int result = cabService.countCabsOfType();

        assertEquals(2, result);
    }

    @Test
    public void testDeleteCab() {
        int cabId = 1;
        Cab cab = new Cab();
        cab.setCabId(cabId);

        when(cabRepository.findById(cabId)).thenReturn(Optional.of(cab));

        cabService.deleteCab(cabId);

        verify(cabRepository, times(1)).delete(cab);
    }

    @Test
    public void testDeleteCab_NotFound() {
        int cabId = 1;

        when(cabRepository.findById(cabId)).thenReturn(Optional.empty());

        assertThrows(ResourceNotFoundException.class, () -> cabService.deleteCab(cabId));
    }

    @Test
    public void testGetAllCabs() {
        List<Cab> cabList = new ArrayList<>();
        Cab cab1 = new Cab();
        cab1.setCabId(1);
        cab1.setCarType("SUV");
        cab1.setRatePerKm(10);
        cab1.setDriverId(101);
        cabList.add(cab1);

        when(cabRepository.findAll()).thenReturn(cabList);

        Driver driver = new Driver();
        driver.setDriverId(101);
        driver.setUsername("Ram");

        when(driverService.getDriverDetails(101)).thenReturn(driver);

        List<CabResponse> result = cabService.getAllCabs();

        assertNotNull(result);
        assertEquals(1, result.size());

        CabResponse cabResponse = result.get(0);
        assertEquals(1, cabResponse.getCabId());
        assertEquals("SUV", cabResponse.getCarType());
        assertEquals(10.0, cabResponse.getRatePerKm());
        assertEquals(101, cabResponse.getDriverId());
        assertEquals(driver, cabResponse.getDriver());
    }
}
